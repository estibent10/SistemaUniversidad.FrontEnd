
<div id="sidebar" class="sidebar sidebar-fixed expandable sidebar-light" data-backdrop="true" data-dismiss="true" data-swipe="true">
    <div class="sidebar-inner">

        <div class="ace-scroll flex-grow-1 mt-1px" data-ace-scroll="{}">

            <nav class="pt-3" aria-label="Main">
                <ul class="nav flex-column has-active-border">


                    <li class="nav-item @GetActive("", NavLinkMatch.All)">
                        <NavLink class="nav-link" href="/">
                            <i class="nav-icon fa fa-home"></i>
                            <span class="nav-text fadeable">Inicio</span>
                        </NavLink>
                    </li>

                    <li class="nav-item @GetActive("universidades", NavLinkMatch.All)">
                        <NavLink class="nav-link" href="/universidades">
                            <i class="nav-icon fa fa-university"></i>
                            <span class="nav-text fadeable">Universidades</span>
                        </NavLink>
                    </li>

                    <li class="nav-item @GetActive("sedes", NavLinkMatch.All)">
                        <NavLink class="nav-link" href="/sedes">
                            <i class="nav-icon fa fa-cubes"></i>
                            <span class="nav-text fadeable">Sedes</span>
                        </NavLink>
                    </li>

                    <li class="nav-item @GetActive("aulas", NavLinkMatch.All)">
                        <NavLink class="nav-link" href="/aulas">
                            <i class="nav-icon fa fa-tv"></i>
                            <span class="nav-text fadeable">Aulas</span>
                        </NavLink>
                    </li>

                </ul>
            </nav>

        </div>

    </div>
</div>

@code {

    [Inject]
    NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized() => NavigationManager.LocationChanged += (s, e) => StateHasChanged();

    bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }

    string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "na";
}