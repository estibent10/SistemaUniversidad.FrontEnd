@page "/aulas"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>
    Gestión de Aulas
</h1>

<div class="card dcard">
    <div class="card-body px-1 px-md-3">

        <form autocomplete="off">
            <div class="d-flex justify-content-between flex-column flex-sm-row mb-3 px-2 px-sm-0">
                <h3 class="text-125 pl-1 mb-3 mb-sm-0 text-secondary-d4">
                    Listado de Aulas
                </h3>

                <div class="mb-2 mb-sm-0">
                    <button type="button" class="btn btn-blue px-3 d-block w-100 text-95 radius-round border-2 brc-black-tp10" @onclick="MostrarModalDeAgregar">
                        <i class="fa fa-plus mr-1"></i>
                        Agregar <span class="d-sm-none d-md-inline">Aula</span>
                    </button>
                </div>
            </div>

            @if (ListaDeAulas == null)
            {
                <p><em>Cargando Listado De Aulas...</em></p>
            }
            else
            {
                <table id="simple-table" class="mb-0 table table-borderless table-bordered-x brc-secondary-l3 text-dark-m2 radius-1 overflow-hidden">
                    <thead class="text-dark-tp3 bgc-grey-l4 text-90 border-b-1 brc-transparent">
                        <tr>
                            <th>Número de Aula</th>
                            <th>Horario</th>
                            <th>Curso Asociado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>

                    <tbody class="mt-1">

                        @foreach (var Aula in ListaDeAulas)
                        {
                            <tr class="bgc-h-yellow-l4 d-style">
                                <td class="text-600 text-dark">@Aula.NumeroAula</td>
                                <td class="text-600 text-orange-d2">@Aula.Horario</td>
                                <td class="d-none d-sm-table-cell text-grey-d1">@Aula.CodigoCurso</td>
                                <td>
                                    <div class="d-none d-lg-flex">
                                        
                                        <button type="button" class="mx-2px btn radius-1 border-2 btn-xs btn-brc-tp btn-light-secondary btn-h-lighter-success btn-a-lighter-success" @onclick="() => MostrarModalDeActualizar(Aula.NumeroAula)">
                                            <i class="fa fa-pencil-alt"></i>
                                        </button>

                                        <button type="button" class="mx-2px btn radius-1 border-2 btn-xs btn-brc-tp btn-light-secondary btn-h-lighter-danger btn-a-lighter-danger" @onclick="() => MostrarModalDeEliminar(Aula.NumeroAula)">
                                            <i class="fa fa-trash-alt"></i>
                                        </button>


                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </form>
    </div>
</div>

<div class="modal fade" id="ModalEdicionDeAula" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-primary-d3" id="exampleModalLabel">
                    @(AccionDeEdicion + " " + "Aula")
                </h5>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <EditForm Model="@AulaDtoModel" OnValidSubmit="@GuardarAula">

                <DataAnnotationsValidator />

                <div class="modal-body">

                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="NumeroAula" class="mb-0">Número de Aula</label>
                        </div>

                        <div class="col-sm-8">
                            <InputText id="NumeroAula" @bind-Value="@AulaDtoModel.NumeroAula" disabled="@(AccionDeEdicion == "Actualizar" ? true : false)"
                                       class="form-control col-sm-12 col-md-12" placeholder="Ingrese número de aula" />
                            <ValidationMessage For="() => AulaDtoModel.NumeroAula" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="Horario" class="mb-0">Horario</label>
                        </div>

                        <div class="col-sm-8">
                            <InputText id="Horario" @bind-Value="@AulaDtoModel.Horario"
                                       class="form-control col-sm-12 col-md-12" placeholder="Ingrese horario" />
                            <ValidationMessage For="() => AulaDtoModel.Horario" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="Curso" class="mb-0">Curso Asociado</label>
                        </div>

                        <div class="col-sm-8">
                            <InputText id="Curso" @bind-Value="@AulaDtoModel.CodigoCurso"
                                       class="form-control col-sm-12 col-md-12" placeholder="Ingrese código curso" />
                            <ValidationMessage For="() => AulaDtoModel.CodigoCurso" />
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary px-4" data-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-primary px-4">Guardar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalConfirmacionDeEliminacionDeAula" tabindex="-1" role="dialog" aria-labelledby="LabelConfirmacionDeEliminacionDeAula" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            
            <div class="modal-header">
                <h5 class="modal-title text-primary-d3" id="LabelConfirmacionDeEliminacionDeAula">
                   Eliminar Aula
                </h5>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <EditForm Model="@AulaDtoModel">


                <div class="modal-body">

                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="AulaPorEliminarNumeroAula" class="mb-0">Número de Aula</label>
                        </div>

                        <div class="col-sm-8">
                            <label for="AulaPorEliminarNumeroAula" class="form-control col-sm-12 col-md-12">@AulaDtoModel.NumeroAula</label>
                        </div>
                    </div>


                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="AulaPorEliminarHorario" class="mb-0">Horario</label>
                        </div>

                        <div class="col-sm-8">
                            <label for="AulaPorEliminarHorario" class="form-control col-sm-12 col-md-12">@AulaDtoModel.Horario</label>
                        </div>
                    </div>


                    <div class="form-group row">
                        <div class="col-sm-4 col-form-label text-sm-right pr-0">
                            <label for="AulaPorEliminarCurso" class="mb-0">Curso Asociado</label>
                        </div>

                        <div class="col-sm-8">
                            <label for="AulaPorEliminarCurso" class="form-control col-sm-12 col-md-12" disable>@AulaDtoModel.CodigoCurso</label>
                        </div>
                    </div>

                    <div class="alert bgc-orange-l3 brc-orange-l1 text-dark-tp1" role="alert">
                        Desea 
                        <a class="alert-link text-danger-d1">
                            Eliminar
                        </a>
                        este registro?
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary px-4" data-dismiss="modal">No</button>
                    <button type="button" class="btn btn-primary px-4" @onclick="ConfirmarEliminacionDeAula">Sí</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private AulaDto[] ListaDeAulas;

    private AulaDto AulaDtoModel = new();


    private string AccionDeEdicion;

    private string NumeroAulaPorActualizar;

    private string NumeroAulaPorEliminar;

    private string UtlHost = "https://localhost:44302/api";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerAulas();
    }


    private async Task MostrarModalDeAgregar()
    {

        AccionDeEdicion = "Agregar";

        AulaDtoModel = new();

        await JSRuntime.InvokeAsync<object>("global.openModal", "ModalEdicionDeAula");

    }

    private async Task MostrarModalDeActualizar(string NumeroAula)
    {

        AccionDeEdicion = "Actualizar";

        await ObtenerAulaPorId(NumeroAula);

        NumeroAulaPorActualizar = NumeroAula;

        await JSRuntime.InvokeAsync<object>("global.openModal", "ModalEdicionDeAula");

    }

    private async Task GuardarAula()
    {
        if (AccionDeEdicion == "Agregar")
        {
            await AgregarAula();
        }
        else
        {
            await ActualizarAula();
        }
    }


    private async Task MostrarModalDeEliminar(string NumeroAula)
    {

        await ObtenerAulaPorId(NumeroAula);

        NumeroAulaPorEliminar = NumeroAula;

        await JSRuntime.InvokeAsync<object>("global.openModal", "ModalConfirmacionDeEliminacionDeAula");
    }

    private async Task ConfirmarEliminacionDeAula()
    {

        await EliminarAula();

    }


    #region Acciones del modelo que van al API

    private async Task ObtenerAulas()
    {
        ListaDeAulas = await Http.GetFromJsonAsync<AulaDto[]>($"{UtlHost}/Aulas");
    }

    private async Task ObtenerAulaPorId(string NumeroAula)
    {
        AulaDtoModel = await Http.GetFromJsonAsync<AulaDto>($"{UtlHost}/Aulas/{NumeroAula}"); //https://localhost:44302/api/Aulas/23

    }

    private async Task AgregarAula()
    {
        var Aula = AulaDtoModel;

        using var response = await Http.PostAsJsonAsync($"{UtlHost}/Aulas", Aula); //https://localhost:44302/api/Aulas

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("global.closeModal", "ModalEdicionDeAula");

            await ObtenerAulas();

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaExito", "Aula agregada correctamente");

        }
        else
        {
            string errorMessage = response.ReasonPhrase;
            Console.WriteLine($"Error: {errorMessage}");

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaError", "No se pudo agregar el aula ");

        }
    }

    private async Task ActualizarAula()
    {
        var Aula = AulaDtoModel;

        using var response = await Http.PutAsJsonAsync($"{UtlHost}/Aulas/{NumeroAulaPorActualizar}", Aula);//https://localhost:44302/api/Aulas/23

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("global.closeModal", "ModalEdicionDeAula");

            await ObtenerAulas();

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaExito", "Aula actualizada correctamente");
        }
        else
        {
            string errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaError", "No se pudo actualizar el aula ");

        }
    }

    private async Task EliminarAula()
    {
        using var response = await Http.DeleteAsync($"{UtlHost}/Aulas/{NumeroAulaPorEliminar}"); //https://localhost:44302/api/Aulas/23

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("global.closeModal", "ModalConfirmacionDeEliminacionDeAula");

            await ObtenerAulas();

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaExito", "Aula eliminada correctamente");
        }
        else
        {
            string errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");

            await JSRuntime.InvokeAsync<object>("global.mostrarAlertaError", "Error al eliminar el aula");

        }
    }

    #endregion
}
